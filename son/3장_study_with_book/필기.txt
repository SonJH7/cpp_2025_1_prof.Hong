3장. 객체, 클래스 개념 이해하기

*** 객체가 무엇이고 클래스 정의를 왜 해야 하는지를 이해하는 것이 객체 지향 프로그래밍의 시작이다. C의 struct과 class 간의 유사점과 차이점을 메모리 상태와 함께 머리속에서 그리면서 이해하는 것이 좋다.***
--- C++ 프로그래밍의 시작은 C struct와 C++ 클래스 간의 유사점과 차이점을 파악하는 것으로 시작한다. 그리고 메모리 상의 stack 영역과 heap 영역에 객체가 어떻게 만들어지고 관리되는지를 추적 이해하는 것이 필요하다. ---

3.1 C의 struct과 C++ 클래스의 유사점과 차이점

    c에서는 항상 public, c++은 멤버가 별도로 선언되지 않으면 private(데이터 멤버의 접근과 이용이 해당 클래스 내만 가능) 그리고 constructor, destructor를 갖는다.

3.2 class와 객체의 개념

    class는 데이터 타입이고, 객체는 그 데이터 타입의 instance이다. 또한, 실제적인 변수 값이며 그 변수의 타입은 해당 class다.
    class는 program code로 작성되기 떄문에 실행 도중에 변경되는 것이 없어 정적이다. 객체는 실행시간에만 존재하고 컴퓨터 메모리상에 동적으로 생성된 후에 나중에 소멸되기에 동적이다.
    
    class 정의는 c++ compiler에 의해 처리되는 code를 말하고 class의 객체 표현은 privat 데이터 멤버로 표현하는 것을 말한다. 이러한 객체표현은 구현에 해당하는 code로서 성능이나 효율을 위해 나중에 변경될 수 있는 부분이다.
    객체를 생성함과 동시에 초기화 하는 것이 좋음

    new를 이용 안하고 객체 생성 stack 영역에서 메모리 할당, 이용하면 heap에 할당되어 자동으로 반환되지 않아 수동으로 소멸자를 호출하여 관리
    "member initializer list" : Date (int m, int d, int y) : month(m), day(d), year(y){} -> month =d; 와 같은 역할(초기화 하는 방법 중 하나)

3.3 c++ 언어

    histroy, 특징 등등